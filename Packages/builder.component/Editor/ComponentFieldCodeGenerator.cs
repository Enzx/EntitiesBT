using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using EntitiesBT.Variant;
using Unity.Entities;
using UnityEditor;

namespace EntitiesBT.Editor
{
    public class BlobArrayFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobArray<>);
        }

        public string GenerateField(FieldInfo fi)
        {
            return $"public {fi.FieldType.GenericTypeArguments[0].FullName}[] {fi.Name};";
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"builder.AllocateArray(ref data.{fi.Name}, {fi.Name});";
        }
    }

    public class BlobStringFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobString);
        }

        public string GenerateField(FieldInfo fi)
        {
            return $"public string {fi.Name};";
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"builder.AllocateString(ref data.{fi.Name}, {fi.Name});";
        }
    }

    public abstract class BlobVariantFieldCodeGenerator : INodeDataFieldCodeGenerator
    {
        protected const string HEAD_LINE = "// Automatically generated by `BlobVariantFieldCodeGenerator`";

        public bool ShouldGenerateVariantInterface = true;
        public string VariantInterfaceDirectory = "Variant";
        public string VariantInterfaceNamespace = "EntitiesBT.Variant";
        public string VariantPropertyNameSuffix = "Variant";
        public NodeCodeGenerator Generator;
        protected string Suffix => $"{VariantType}{VariantPropertyNameSuffix}";

        protected abstract string VariantType { get; }
        protected abstract Type FieldType { get; }
        protected abstract void GenerateVariantInterface(Type valueType);

        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == FieldType;
        }

        public string GenerateField(FieldInfo fi)
        {
            var valueType = fi.FieldType.GetGenericArguments()[0];
            if (ShouldGenerateVariantInterface) GenerateVariantInterface(valueType);
            var stringBuilder = new StringBuilder();
            stringBuilder.Append("[UnityEngine.SerializeReference, SerializeReferenceButton]");
            stringBuilder.Append(" ");
            stringBuilder.AppendLine($"public {VariantInterfaceNamespace}.{valueType.Name}{Suffix} {fi.Name};");
            return stringBuilder.ToString();
        }


        public string GenerateBuild(FieldInfo fi)
        {
            return $"{fi.Name}.Allocate(ref builder, ref data.{fi.Name}, Self, tree);";
        }
    }

    public class BlobVariantReaderFieldCodeGenerator : BlobVariantFieldCodeGenerator
    {
        protected override string VariantType => "Reader";
        protected override Type FieldType => typeof(BlobVariantReader<>);

        protected override void GenerateVariantInterface(Type valueType)
        {
            var directory = Path.GetDirectoryName(AssetDatabase.GetAssetPath(Generator)) + "/" + VariantInterfaceDirectory;
            if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);

            var filepath = $"{directory}/{valueType.Name}{Suffix}.cs";
            if (!File.Exists(filepath) || File.ReadLines(filepath).FirstOrDefault() == HEAD_LINE)
            {
                using (var writer = new StreamWriter(filepath))
                {
                    writer.WriteLine(HEAD_LINE);
                    writer.WriteLine(VariantGenerator.NamespaceBegin(VariantInterfaceNamespace));
                    writer.CreateReaderVariants(valueType, null, Suffix);
                    writer.WriteLine(VariantGenerator.NamespaceEnd());
                }
            }
        }
    }

    public class BlobVariantWriterFieldCodeGenerator : BlobVariantFieldCodeGenerator
    {
        protected override string VariantType => "Writer";
        protected override Type FieldType => typeof(BlobVariantWriter<>);

        protected override void GenerateVariantInterface(Type valueType)
        {
            var directory = Path.GetDirectoryName(AssetDatabase.GetAssetPath(Generator)) + "/" + VariantInterfaceDirectory;
            if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);

            var filepath = $"{directory}/{valueType.Name}{Suffix}.cs";
            if (!File.Exists(filepath) || File.ReadLines(filepath).FirstOrDefault() == HEAD_LINE)
            {
                using (var writer = new StreamWriter(filepath))
                {
                    writer.WriteLine(HEAD_LINE);
                    writer.WriteLine(VariantGenerator.NamespaceBegin(VariantInterfaceNamespace));
                    writer.CreateWriterVariants(valueType, null, Suffix);
                    writer.WriteLine(VariantGenerator.NamespaceEnd());
                }
            }
        }
    }

    public class BlobVariantFieldCodeGeneratorForOdin : INodeDataFieldCodeGenerator
    {
        public bool ShouldGenerate(FieldInfo fi)
        {
            return fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(BlobVariantReader<>);
        }

        public string GenerateField(FieldInfo fi)
        {
            var variantType = fi.FieldType.GetGenericArguments()[0];
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("[OdinSerialize, NonSerialized]");
            stringBuilder.Append("        ");
            stringBuilder.AppendLine($"public EntitiesBT.Variant.VariantProperty<{variantType.FullName}> {fi.Name};");
            return stringBuilder.ToString();
        }

        public string GenerateBuild(FieldInfo fi)
        {
            return $"{fi.Name}.Allocate(ref builder, ref data.{fi.Name}, Self, tree);";
        }
    }
}
